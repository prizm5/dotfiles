# ~/.bashrc: executed by bash(1) for non-login shells.
# see /usr/share/doc/bash/examples/startup-files (in the package bash-doc)
# for examples

# If not running interactively, don't do anything
case $- in
    *i*) ;;
      *) return;;
esac

# don't put duplicate lines or lines starting with space in the history.
# See bash(1) for more options
HISTCONTROL=ignoreboth

# append to the history file, don't overwrite it
shopt -s histappend

# for setting history length see HISTSIZE and HISTFILESIZE in bash(1)
HISTSIZE=1000
HISTFILESIZE=2000

# check the window size after each command and, if necessary,
# update the values of LINES and COLUMNS.
shopt -s checkwinsize

# If set, the pattern "**" used in a pathname expansion context will
# match all files and zero or more directories and subdirectories.
#shopt -s globstar

# make less more friendly for non-text input files, see lesspipe(1)
#[ -x /usr/bin/lesspipe ] && eval "$(SHELL=/bin/sh lesspipe)"

# set variable identifying the chroot you work in (used in the prompt below)
if [ -z "${debian_chroot:-}" ] && [ -r /etc/debian_chroot ]; then
    debian_chroot=$(cat /etc/debian_chroot)
fi

# set a fancy prompt (non-color, unless we know we "want" color)
case "$TERM" in
    xterm-color) color_prompt=yes;;
esac

# uncomment for a colored prompt, if the terminal has the capability; turned
# off by default to not distract the user: the focus in a terminal window
# should be on the output of commands, not on the prompt
force_color_prompt=yes

if [ -n "$force_color_prompt" ]; then
    if [ -x /usr/bin/tput ] && tput setaf 1 >&/dev/null; then
	# We have color support; assume it's compliant with Ecma-48
	# (ISO/IEC-6429). (Lack of such support is extremely rare, and such
	# a case would tend to support setf rather than setaf.)
	color_prompt=yes
    else
	color_prompt=
    fi
fi

if [ "$color_prompt" = yes ]; then
    PS1='${debian_chroot:+($debian_chroot)}\[\033[01;32m\]\u@\h\[\033[00m\]:\[\033[01;34m\]\w \$\[\033[00m\] '
else
    PS1='${debian_chroot:+($debian_chroot)}\u@\h:\w\$ '
fi
unset color_prompt force_color_prompt

# If this is an xterm set the title to user@host:dir
case "$TERM" in
xterm*|rxvt*)
    PS1="\[\e]0;${debian_chroot:+($debian_chroot)}\u@\h: \w\a\]$PS1"
    ;;
*)
    ;;
esac

# enable color support of ls and also add handy aliases
if [ -x /usr/bin/dircolors ]; then
    test -r ~/.dircolors && eval "$(dircolors -b ~/.dircolors)" || eval "$(dircolors -b)"
    alias ls='ls --color=auto'
    #alias dir='dir --color=auto'
    #alias vdir='vdir --color=auto'

    alias grep='grep --color=auto'
    alias fgrep='fgrep --color=auto'
    alias egrep='egrep --color=auto'
fi

# colored GCC warnings and errors
#export GCC_COLORS='error=01;31:warning=01;35:note=01;36:caret=01;32:locus=01:quote=01'

# some more ls aliases
#alias ll='ls -l'
#alias la='ls -A'
#alias l='ls -CF'
#-----------------------------------------
# Aliases
#-----------------------------------------
alias crimson='ssh -L:5984:127.0.0.1:5984 web@crimson-irve5036.cloudapp.net'
alias nc=ncat
alias ..='cd ..'
alias ...='cd ../..'
alias s='cd ..'
alias cls="printf '\033c'"
alias ls='ls -al --color'
alias echoe='echo -e'
alias dir=ls
alias ci='git commit -m'
alias add='git add -p'
alias st='git status'
alias pu='git pull'
alias iisreset='iisreset /timeout:0'
alias lg="git log --graph --pretty=format:'%Cred%h%Creset -%C(yellow)%d%Creset %s %Cgreen(%cr)%Creset' --abbrev-commit --date=relative"
alias kill-all-sshd="ps -f -u $USERNAME | grep ssh-agent | tr -s ' ' | cut -f3 -d' ' | xargs kill"
alias start-sshd="start_shared_ssh_agent"
alias rake="bundle exec rake"
#-----
# git
#-----
alias gti='git'
alias igt='git'
alias got='git'

#-----------------------------------------
# Source additional files
#-----------------------------------------
[[ -s "$USERPROFILE/.pik/.pikrc" ]] && source "$USERPROFILE/.pik/.pikrc"
#source /etc/bash-completion.d/develop
#source /etc/bash-completion.d/rake

# Alias definitions.
# You may want to put all your additions into a separate file like
# ~/.bash_aliases, instead of adding them here directly.
# See /usr/share/doc/bash-doc/examples in the bash-doc package.

if [ -f ~/.bash_aliases ]; then
    . ~/.bash_aliases
fi

# enable programmable completion features (you don't need to enable
# this, if it's already enabled in /etc/bash.bashrc and /etc/profile
# sources /etc/bash.bashrc).
if ! shopt -oq posix; then
  if [ -f /usr/share/bash-completion/bash_completion ]; then
    . /usr/share/bash-completion/bash_completion
  elif [ -f /etc/bash_completion ]; then
    . /etc/bash_completion
  fi
fi
#-----------------------------------------
# Add path marking function
#-----------------------------------------
export MARKPATH=$HOME/.marks
function jump { 
    cd -P "$MARKPATH/$1" 2>/dev/null || echo "No such mark: $1"
}
function mark { 
    mkdir -p "$MARKPATH"; ln -s "$(pwd)" "$MARKPATH/$1"
}
function unmark { 
    rm -i "$MARKPATH/$1"
}
function marks {
    ls -l "$MARKPATH" | sed 's/  / /g' | cut -d' ' -f9- | sed 's/ -/\t-/g' && echo
}

#-----------------------------------------
# If tput setup tput
#-----------------------------------------
if [ -x /usr/bin/tput ] && tput setaf 1 >&/dev/null; then
  c_reset=`tput sgr0`
  c_user=`tput setaf 2; tput bold`
  c_path=`tput setaf 4; tput bold`
  c_git_clean=`tput setaf 2`
  c_git_dirty=`tput setaf 1`
else
  c_reset=
  c_user=
  c_path=
  c_git_cleanclean=
  c_git_dirty=
fi

#-----------------------------------------
# Setup prompt
#-----------------------------------------
FORCE_LONG_NAME=false
export PAIR_ENV=~/.ssh/.pair-env
function getPair {
  if $FORCE_LONG_NAME; then git config --get user.name; return 0; fi
  [[ -s "$PAIR_ENV" ]] && source "$PAIR_ENV" > /dev/null
  if [ -z "$PAIR_INITIALS" ]; then
    git config --get user.name;
  else
    echo "$PAIR_INITIALS";
  fi
}

export GIT_PS1_SHOWDIRTYSTATE=true
PS1="\[\033]0;\w\007
\033[32m\][\$(getPair)] \[\033[33m\w\$(__git_ps1 ' (%s)')\033[0m\]
\[\e[;32m\]~>\[\e[m\] "

#-----------------------------------------
# Start ssh-agent for multisession
#-----------------------------------------
function start_shared_ssh_agent {
  export SSH_AUTH_SOCK=/tmp/.${USERNAME}-ssh-agent.sock
  export SSH_ENV=/tmp/.${USERNAME}-ssh-env
  [[ -s "$SSH_ENV" ]] && source "$SSH_ENV" > /dev/null
  kill -0 $SSH_AGENT_PID > /dev/null 2>&1
  if [ $? -eq 0 ]; then echo "using existing agent: $SSH_AGENT_PID"; fi
  ssh-add -l >/dev/null 2>&1
  if [ $? = 2 ]; then
    echo "initializing a new ssh agent..."
    # No ssh-agent running
    rm -rf $SSH_AUTH_SOCK
    # >| allows output redirection to over-write files if no clobber is set
    # default lifetime of identities is 5hrs
    ssh-agent -t 18000 -a $SSH_AUTH_SOCK >| "$SSH_ENV"
    if [ $? -ne 0 ]; then echo "failed to init a new ssh agent!"; fi
    source "$SSH_ENV"
    echo $SSH_AGENT_PID >| /tmp/.ssh-agent-pid
  fi
}

PATH=~/bin:/usr/lib/node_modules:/usr/lib:$PATH
export PATH

start_shared_ssh_agent
export EDITOR=vim
